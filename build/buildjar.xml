<!-- This file builds a single jar file. It just sets defaults for the java
     compiler then invokes it.

     This is the only place we compile files.

     On entry we require:
       build.jar.file        Fully specified name of destination jar file.
       base.name             Defines the name of the source base.
       base.java.sources     Defines the java source files
       base.class.patternset Defines the java class files
       base.resource.files   Defines extra resources to go in the jar

     We will copy all files defined by base.java.patternset to a temporary
     location and compile out of that into a temporary classes location.

     We do that to avoid a problematic feature of the java compilers, the
     tendency to recompile any referenced sources found on the source path.

     So, if we have all our sources under the directory "src" and compile a
     single package in that tree, all referenced classes will be compiled,
     even if they exist in a jar file on the class path.

     The other side-effect is that we might compile and include classes we
     didn't realise we were compiling.

     The downside is that we need to be very specific about the classes we
     compile for a package and we might need to put classes in
     base.java.sources which we don't want in the final jar file.

     On exit we will have created classes in the directory
        ${jar.temp.classes}
     and a jar file
        ${build.jar.file}

     Authors: Mike Douglass   douglm@rpi.edu
-->

<project name="buildjar" default="build" >
  <target name="init">
    <!--  =================== Compilation Control Options ===============
      These properties control option settings on the Javac compiler when it
      is invoked using the <javac> task.

      compile.debug        Should compilation include the debug option?
      compile.deprecation  Should compilation include the deprecation option?
      compile.optimize     Should compilation include the optimize option?

      Below are the defaults. They may already be set in the build properties.
    -->

    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize" value="true"/>
    <property name="compile.verbose" value="false"/>
    <property name="compile.listfiles" value="false"/>

    <property name="jar.dest.dir" location="${dist.home}" />

    <property name="jar.temp.sources"
             location="${jar.dest.dir}/source" />
    <property name="jar.temp.classes"
             location="${jar.dest.dir}/classes" />
  </target>

  <target name="build" depends="init"
          description="Compile Java sources">
    <!-- ==============================================================
          See if the jar is up to date. We recompile if any of the
          source files or metainf files are newer. We also recompile if
          any jars on the package classpath are newer.
         ============================================================== -->

    <uptodate property="build.jar.uptodate"
              targetfile="${build.jar.file}" >
      <srcfiles refid="base.java.sources" />
      <srcfiles refid="base.resource.files"/>
      <!-- change this to a fileset
      <srcfiles refid="compile.classpath" />
      -->
    </uptodate>

    <antcall target="do.build.uptodate" inheritRefs="true" />
    <antcall target="do.build.notuptodate" inheritRefs="true" />
  </target>

  <target name="do.build.notuptodate"
          if="build.jar.uptodate">
    <echo message="**** ${build.jar.file} is up to date" />
  </target>

  <target name="do.build.uptodate"
          unless="build.jar.uptodate">
    <echo message="**** ${build.jar.file} needs rebuilding" />

    <!-- Delete jar file -->
    <delete file="${build.jar.file}"/>

    <dirname property="build.jar.dir" file="${build.jar.file}"/>

    <mkdir dir="${build.jar.dir}" />

    <!-- ==============================================================
                      Build the classes
         ============================================================== -->

    <!-- First copy the sources we are going to compile into a temp
         directory. -->
    <mkdir dir="${jar.temp.sources}" />
    <copy toDir="${jar.temp.sources}">
      <fileset refid="base.java.sources" />
      <fileset refid="base.resource.files"/>
    </copy>

    <mkdir dir="${jar.temp.classes}"/>
    <echo message="About to build jar ${build.jar.file}"/>
    <property name="cp" refid="compile.classpath" />
    <echo message="***************cp: ${cp}"/>

    <javac srcdir="${jar.temp.sources}"
           destdir="${jar.temp.classes}"
           debug="${compile.debug}"
           verbose="${compile.verbose}"
           listfiles="${compile.listfiles}"
           deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
      <include name="**/*.java"/>
      <compilerarg value="-nowarn" compiler="jikes" />
    </javac>

    <!-- ==============================================================
                      Build jar file
         ============================================================== -->

    <jar jarfile="${build.jar.file}">
      <fileset dir="${jar.temp.classes}">
        <patternset refid="base.class.patternset"/>
      </fileset>
      <fileset refid="base.resource.files"/>
    </jar>

    <!-- ==============================================================
                      Clean up
         ============================================================== -->

    <delete dir="${jar.temp.sources}" />
    <delete dir="${jar.temp.classes}"/>
  </target>
</project>
